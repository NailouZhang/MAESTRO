# -*- coding: utf-8 -*-
# @Author: Dongqing Sun
# @E-mail: Dongqingsun96@gmail.com
# @Date:   2020-03-04 20:21:08
# @Last Modified by:   Dongqing Sun
# @Last Modified time: 2021-03-29 11:43:08


import os
import argparse as ap
import numpy as np
import scipy.sparse as sp_sparse

# from rpy2.robjects.packages import importr
from MAESTRO.scATAC_H5Process import *
from MAESTRO.scRNA_utility import RSCRIPT_PATH


def scatacqc_parser(subparsers):
    """
    Add main function init-scatac argument parsers.
    """

    workflow = subparsers.add_parser("scatac-qc", 
        help = "Perform quality control for scATAC-seq peak-cell binary matrix. "
        "Filter cells according to number of peaks covered.")
    group_input = workflow.add_argument_group("Input files arguments")
    group_input.add_argument("--format", dest = "format", default = "", 
        choices = ["h5", "mtx", "plain"], 
        help = "Format of the count matrix file.")
    group_input.add_argument("--peakcount", dest = "peakcount", default = "", 
        help = "Location of peak count matrix file. "
        "Peak count matrix with peaks as rows and cells as columns. "
        "If the format is 'h5' or 'plain', users need to specify the name of the count matrix file "
        "and row names should be like 'chromosome_peakstart_peakend', such as 'chr10_100020591_100020841'. "
        "If the format is 'mtx', the 'matrix' should be the name of .mtx formatted matrix file, such as 'matrix.mtx'.")
    group_input.add_argument("--feature", dest = "feature", default = "peaks.bed", 
        help = "Location of feature file (required for the format of 'mtx'). "
        "Features correspond to row indices of count matrix. "
        "The feature file should be the peak bed file with 3 columns. DEFAULT: peaks.bed.")
    group_input.add_argument("--barcode", dest = "barcode", default = "barcodes.tsv", 
        help = "Location of barcode file (required for the format of 'mtx'). "
        "Cell barcodes correspond to column indices of count matrix. DEFAULT: barcodes.tsv. ")
    group_input.add_argument("--single-stat", dest = "single_stat", default = "", 
        help = "(Optional) Location of single-cell-level QC file generated by MAESTRO pipeline (singlecell.txt). "
        "If users provide the file, cells will be filtered according to --count-cutoff and --frip-cutoff. "
        "The file is tab-separated which contains three columns -- barcode, read counts and reads in promoter. DEFAULT: singlecell.txt. ")
    group_input.add_argument("--species", dest = "species", default = "GRCh38", 
        choices = ["GRCh38", "GRCm38"], type = str, 
        help = "Species (GRCh38 for human and GRCm38 for mouse). DEFAULT: GRCh38.")

    # Quality control cutoff
    group_cutoff = workflow.add_argument_group("Quality control arguments")
    group_cutoff.add_argument("--peak-cutoff", dest = "peak_cutoff", default = 100, type = int,
        help = "Minimum number of peaks included in each cell. DEFAULT: 100.")
    group_cutoff.add_argument("--count-cutoff", dest = "count_cutoff", default = 1000, type = int, 
        help = "Cutoff for the number of count in each cell. It works only when --single-stat is provided. DEFAULT: 1000.")
    group_cutoff.add_argument("--frip-cutoff", dest = "frip_cutoff", default = 0.2, type = float, 
        help = "Cutoff for fraction of reads in promoter in each cell. It works only when --single-stat is provided. DEFAULT: 0.2.")
    group_cutoff.add_argument("--cell-cutoff", dest = "cell_cutoff", default = 10, type = int,
        help = "Minimum number of cells covered by each peak. DEFAULT: 10.")    

    group_output = workflow.add_argument_group("Output arguments")
    group_output.add_argument("-d", "--directory", dest = "directory", default = "MAESTRO", 
        help = "Path to the directory where the result file shall be stored. DEFAULT: MAESTRO.")
    group_output.add_argument("--outprefix", dest = "outprefix", default = "10x-genomics", 
        help = "Prefix of output files. DEFAULT: MAESTRO.")


def Filter(rawmatrix, feature, barcode, peak_cutoff, validcell, cell_cutoff, outprefix, species):
    peaks_per_cell = np.asarray((rawmatrix > 0).sum(axis=0))

    if validcell == []:
        passed_cell = peaks_per_cell > peak_cutoff
    else:
        valid_cell = np.asarray([i in validcell for i in barcode])
        passed_cell = np.logical_and(peaks_per_cell > peak_cutoff, valid_cell)

    cells_per_peak = np.asarray((rawmatrix > 0).sum(axis=1))
    passed_peak = cells_per_peak > cell_cutoff
    passed_peak = np.transpose(passed_peak)

    # gene = [True]*rawmatrix.shape[0]
    passed_cell_matrix = rawmatrix[np.ix_(passed_peak.tolist()[0], passed_cell.tolist()[0])]

    passed_barcodes = np.array(barcode)[passed_cell.tolist()[0]].tolist()
    passed_peaks = np.array(feature)[passed_peak.tolist()[0]].tolist()

    # passed_barcodes = [bc.decode('utf-8') for bc in passed_barcodes]

    write_10X_h5(outprefix + "_filtered_peak_count.h5", matrix = passed_cell_matrix, features = passed_peaks, barcodes = passed_barcodes, genome = species, datatype = 'Peak')



def scatac_qc(directory, outprefix, fileformat, peakcount, feature, barcode, single_stat, peak_cutoff, count_cutoff, frip_cutoff, cell_cutoff, species):

    try:
        os.makedirs(directory)
    except OSError:
        # either directory exists (then we can ignore) or it will fail in the
        # next step.
        pass

    if fileformat == "plain":
        matrix_dict = read_count(peakcount)
        peakmatrix = matrix_dict["matrix"]
        peakmatrix = sp_sparse.csc_matrix(peakmatrix, dtype=numpy.int8)
        features = matrix_dict["features"]
        barcodes = matrix_dict["barcodes"]

    elif fileformat == "h5":
        scatac_count = read_10X_h5(peakcount)
        peakmatrix = scatac_count.matrix
        features = scatac_count.names.tolist()
        barcodes = scatac_count.barcodes.tolist()

        if type(features[0]) == bytes:
            features = [i.decode() for i in features]
        if type(barcodes[0]) == bytes:
            barcodes = [i.decode() for i in barcodes]

    elif fileformat == "mtx":
        matrix_dict = read_10X_mtx(matrix_file = peakcount, feature_file = feature, barcode_file = barcode, datatype = "Peak")
        peakmatrix = matrix_dict["matrix"]
        features = matrix_dict["features"]
        features = [f.encode() for f in features]
        barcodes = matrix_dict["barcodes"]


    filename = os.path.join(directory, outprefix)
    
    if single_stat == "":
        validcells_list = []

    else:
        # maestro_r = importr("MAESTRO")
        # maestro_r.ATACFilteringPlot(filepath = single_stat, platform = "10x-genomics", name = filename, reads_cutoff = count_cutoff, frip_cutoff = frip_cutoff)

        cmd = "Rscript %s/scATACseq_qc_filtering.R --prefix %s --outdir . --singlestat %s --countcutoff %s --fripcutoff %s" %(RSCRIPT_PATH, filename, single_stat, count_cutoff, frip_cutoff)
        os.system(cmd)

        validcells_file = filename + "_scATAC_validcells.txt"
        with open(validcells_file, "r") as validcells_in:
            validcells_list = validcells_in.readlines()
            validcells_list = [i.strip() for i in validcells_list]

    Filter(rawmatrix = peakmatrix, feature = features, barcode = barcodes, peak_cutoff = peak_cutoff, cell_cutoff = cell_cutoff, validcell = validcells_list, outprefix = filename, species = species)



